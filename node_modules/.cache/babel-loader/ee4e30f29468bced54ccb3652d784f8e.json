{"ast":null,"code":"import _objectSpread from \"/media/mickuki/f37c4816-231b-487c-8f5f-b372b930c30c/web_master/programist-war/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport cardAttributes from '../../components/Game/Cards/cardAttributes';\nimport cardPictures from '../../components/Game/Cards/cardPictures';\nconst initialState = {\n  pass: [false, false],\n  results: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false],\n  allCards: {\n    cards: [{\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }],\n    cardOpponent: [{\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }]\n  }\n};\n\nconst reducer = (state = initialState, action) => {\n  const attack = (newAllCards1, direction, attack1, attack2) => {\n    //const newAllCards1={...state.allCards}\n    if (attack2) {\n      //const def1=newAllCards1[state.results[direction]].value.defense\n      //const def2=newAllCards1[state.results[direction+5]].value.defense\n      //for optimization!!!\n      if (state.results[direction]) {\n        const def1 = newAllCards1[state.results[direction]].value.defense;\n\n        if (state.results[direction + 5]) {\n          const def2 = newAllCards1[state.results[direction + 5]].value.defense;\n\n          if (attack1 > def1) {\n            newAllCards1[state.results[direction]].value.life -= attack1 - def1;\n          }\n\n          if (attack1 > def2) {\n            newAllCards1[state.results[direction + 5]].value.life -= attack2 - def2;\n          }\n        } else {\n          if (attack1 + attack2 > def1) {\n            newAllCards1[state.results[direction]].value.life -= attack1 + attack2 - def1;\n          }\n        }\n      } else if (state.results[direction + 5]) {\n        const def2 = newAllCards1[state.results[direction + 5]].value.defense;\n\n        if (attack1 + attack2 > def2) {\n          newAllCards1[state.results[direction + 5]].value.life -= attack1 + attack2 - def2;\n        }\n      }\n    } else if (attack1) {\n      if (state.results[direction]) {\n        const def1 = newAllCards1[state.results[direction]].value.defense;\n\n        if (attack1 > def1) {\n          newAllCards1[state.results[direction]].value.life -= attack1 - def1;\n        }\n      } else if (state.results[direction + 5]) {\n        const def2 = newAllCards1[state.results[direction + 5]].value.defense;\n\n        if (attack1 > def2) {\n          newAllCards1[state.results[direction + 5]].value.life -= attack1 - def2;\n        }\n      }\n    }\n\n    return newAllCards1;\n  };\n\n  const delteCard = newCards => {\n    newCards.map((card, i) => {\n      if (card.value.life <= 0) {\n        return state.results.map((val, j) => {\n          if (card.position === j) {\n            card.position = 40;\n            return state.results[j] = false;\n          }\n        });\n      }\n    });\n    return newCards;\n  };\n\n  const defense = (newAllCards1, x, y, def) => {\n    for (let i = 0; i < 5; i++) {\n      if (state.results[i + x]) {\n        const attack1 = def[state.results[i + x]].value.atack;\n\n        if (state.results[i + 5 + x]) {\n          newAllCards1 = attack(newAllCards1, i + y, attack1, def[state.results[i + x + 5]].value.atack);\n        } else {\n          newAllCards1 = attack(newAllCards1, i + y, attack1);\n        }\n      } else if (state.results[i + 5 + x]) {\n        newAllCards1 = attack(newAllCards1, i + y, false, def[state.results[i + x + 5]].value.atack);\n      }\n    }\n\n    return newAllCards1;\n  };\n\n  const playOponents = () => {\n    if (state.pass[1] === false) {\n      //bott x=id pola y karta\n      let x;\n      let pass = 0;\n\n      for (;;) {\n        x = Math.floor(Math.random() * 10) + 10;\n\n        if (state.results[x] === false) {\n          break;\n        }\n\n        pass++;\n\n        if (pass > 30) {\n          return state.pass[1] = true;\n        }\n      }\n\n      let y;\n      pass = 0;\n      const theNumberOfCards = state.allCards.cardOpponent.length;\n\n      for (;;) {\n        y = Math.floor(Math.random() * theNumberOfCards);\n\n        if (state.allCards.cardOpponent[y].position === 50) {\n          break;\n        }\n\n        pass++;\n\n        if (pass > 30) {\n          return state.pass[1] = true;\n        }\n      }\n\n      const newResults4 = state.results;\n\n      const newAllCards2 = _objectSpread({}, state.allCards);\n\n      newResults4[x] = y;\n      newAllCards2.cardOpponent[y].position = x;\n      return _objectSpread({}, state, {\n        results: newResults4,\n        allCards: _objectSpread({}, newAllCards2)\n      });\n    }\n  };\n\n  const endTurn = (newAllCards1, newAllCards2) => {\n    playOponents();\n    newAllCards1 = defense(newAllCards1, 0, 10, newAllCards2);\n    newAllCards2 = defense(newAllCards2, 10, 0, newAllCards1);\n    newAllCards1 = delteCard(newAllCards1);\n    newAllCards2 = delteCard(newAllCards2);\n    return _objectSpread({}, state, {\n      allCards: {\n        cardOpponent: newAllCards1,\n        cards: newAllCards2\n      }\n    });\n  };\n\n  const endGame = newState => {\n    console.log('endGame');\n    let lifePlayer = 0;\n    let lifeOpponent = 0;\n    newState.allCards.cards.map(card => {\n      if (card.position <= 20) {\n        lifePlayer = lifePlayer + card.value.life;\n      }\n    });\n    newState.allCards.cardOpponent.map(card => {\n      if (card.position <= 20) {\n        lifeOpponent = lifeOpponent + card.value.life;\n      }\n    });\n\n    if (lifePlayer > lifeOpponent) {\n      alert('winnner');\n    } else {\n      if (lifePlayer < lifeOpponent) {\n        alert('remis');\n      } else {\n        alert('failed');\n      }\n    }\n  };\n\n  const distributionCard = () => {\n    const theNumberOfCards = cardAttributes.length;\n\n    const newState = _objectSpread({}, state.allCards);\n\n    newState.cards.map(card => {\n      const idCard = Math.floor(Math.random() * theNumberOfCards);\n      card.position = 50;\n      card.value = _objectSpread({}, cardAttributes[idCard]);\n      card.pictures = cardPictures[idCard];\n    });\n    newState.cardOpponent.map(card => {\n      const idCard = Math.floor(Math.random() * theNumberOfCards);\n      card.position = 50;\n      card.value = _objectSpread({}, cardAttributes[idCard]);\n      card.pictures = cardPictures[idCard];\n    });\n    return {\n      allCards: _objectSpread({}, newState)\n    };\n  };\n\n  switch (action.type) {\n    case 'PLAY_THE_CARD':\n      const newResults = state.results;\n\n      const newAllCards = _objectSpread({}, state.allCards);\n\n      newResults[action.id] = action.val;\n\n      if (newAllCards.cards[action.val].position <= 20) {\n        newResults[newAllCards.cards[action.val].position] = false;\n      }\n\n      newAllCards.cards[action.val].position = action.id;\n      return _objectSpread({}, state, {\n        results: newResults,\n        allCards: _objectSpread({}, newAllCards)\n      });\n\n    case 'CARDGO':\n      const newResults3 = state.results;\n\n      const newAllCard = _objectSpread({}, state.allCards);\n\n      newResults3[newAllCard.cards[action.val].position] = false;\n      newAllCard.cards[action.val].position = action.fieldPlayed;\n      return _objectSpread({}, state, {\n        results: newResults3,\n        allCards: _objectSpread({}, newAllCard)\n      });\n\n    case 'PASS':\n      if (state.pass[1]) {\n        endGame(_objectSpread({}, state));\n      } else {\n        let newAllCards1 = _objectSpread({}, state);\n\n        for (; !state.pass[1];) {\n          newAllCards1 = _objectSpread({}, endTurn(newAllCards1.allCards.cardOpponent, newAllCards1.allCards.cards));\n        }\n\n        endGame(_objectSpread({}, newAllCards1));\n        return _objectSpread({}, state, newAllCards1);\n      }\n\n    case 'NEWGAME':\n      const newResults1 = state.results.map((value, i) => {\n        return value = false;\n      });\n      return _objectSpread({}, state, {\n        results: newResults1\n      }, distributionCard(), {\n        pass: [false, false]\n      });\n\n    case 'GIVEAWAYTHECARS':\n      return _objectSpread({}, state, distributionCard());\n\n    case 'ENDTURN':\n      let newAllCards1 = state.allCards.cardOpponent; //mozliwe do poprawy !!!\n\n      let newAllCards2 = state.allCards.cards;\n      return _objectSpread({}, endTurn(newAllCards1, newAllCards2));\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/media/mickuki/f37c4816-231b-487c-8f5f-b372b930c30c/web_master/programist-war/src/store/reducers/table.js"],"names":["cardAttributes","cardPictures","initialState","pass","results","allCards","cards","position","cardOpponent","reducer","state","action","attack","newAllCards1","direction","attack1","attack2","def1","value","defense","def2","life","delteCard","newCards","map","card","i","val","j","x","y","def","atack","playOponents","Math","floor","random","theNumberOfCards","length","newResults4","newAllCards2","endTurn","endGame","newState","console","log","lifePlayer","lifeOpponent","alert","distributionCard","idCard","pictures","type","newResults","newAllCards","id","newResults3","newAllCard","fieldPlayed","newResults1"],"mappings":"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","sourcesContent":["import cardAttributes from '../../components/Game/Cards/cardAttributes';\nimport cardPictures from '../../components/Game/Cards/cardPictures';\n\n\nconst initialState = {\n    pass:[false,false],\n    results: [false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false],\n    allCards:{\n        cards:[{position:40},\n            {position:40},\n            {position:40},\n            {position:40},\n            {position:40},\n            {position:40},\n            {position:40},\n            {position:40},\n            {position:40},\n            {position:40},\n            {position:40},\n            {position:40}],\n        cardOpponent:[{position:40},\n            {position:40},\n            {position:40},\n            {position:40},\n            {position:40},\n            {position:40},\n            {position:40},\n            {position:40},\n            {position:40},\n            {position:40},\n            {position:40},\n            {position:40}]\n    }\n};\n\nconst reducer = ( state = initialState, action) => {\n\n\n    const attack =(newAllCards1,direction,attack1,attack2)=>{\n        //const newAllCards1={...state.allCards}\n        if(attack2){\n            //const def1=newAllCards1[state.results[direction]].value.defense\n            //const def2=newAllCards1[state.results[direction+5]].value.defense\n            //for optimization!!!\n            if(state.results[direction]){\n                const def1=newAllCards1[state.results[direction]].value.defense\n                if(state.results[direction+5]){\n                    const def2=newAllCards1[state.results[direction+5]].value.defense\n                    if(attack1>def1){newAllCards1[state.results[direction]].value.life-=(attack1-def1);}\n                    if(attack1>def2){newAllCards1[state.results[direction+5]].value.life-=(attack2-def2);}\n                }else{\n                    if((attack1+attack2)>def1){newAllCards1[state.results[direction]].value.life-=(attack1+attack2-def1);}\n                }\n            }else\n            if(state.results[direction+5]){\n                const def2=newAllCards1[state.results[direction+5]].value.defense\n                if((attack1+attack2)>def2){newAllCards1[state.results[direction+5]].value.life-=(attack1+attack2-def2);}\n            }\n        }else if(attack1){\n            if(state.results[direction]){\n                const def1=newAllCards1[state.results[direction]].value.defense\n                if(attack1>def1){newAllCards1[state.results[direction]].value.life-=(attack1-def1);}\n            }else\n            if(state.results[direction+5]){\n                const def2=newAllCards1[state.results[direction+5]].value.defense\n                if(attack1>def2){newAllCards1[state.results[direction+5]].value.life-=(attack1-def2);}\n            }\n        }\n        return newAllCards1;\n    }\n    const delteCard=(newCards)=>{\n        newCards.map((card,i)=>{\n            if(card.value.life<=0){\n                        return state.results.map((val,j)=>{\n                            if(card.position===j){\n                                card.position=40;\n                                return state.results[j]=false;\n                            }\n                        })\n            }\n        })\n        return newCards\n    }\n\n    const defense =(newAllCards1,x,y,def)=>{\n        for(let i=0;i<5;i++){\n            if(state.results[i+x]){\n                const attack1=def[state.results[i+x]].value.atack\n                if(state.results[i+5+x]){\n                    newAllCards1=attack(newAllCards1,i+y,attack1,def[state.results[i+x+5]].value.atack);\n                }else{\n                    newAllCards1=attack(newAllCards1,i+y,attack1);\n                }\n            }else\n            if(state.results[i+5+x]){\n                newAllCards1=attack(newAllCards1,i+y,false,def[state.results[i+x+5]].value.atack);\n            }\n        }\n        return newAllCards1;\n    }\n    const playOponents=()=>{\n        if(state.pass[1]===false){//bott x=id pola y karta\n        let x;\n        let pass=0;\n        for(;;){\n            x=Math.floor(Math.random() * 10)+10;\n            if(state.results[x]===false){break;}\n            pass++;\n            if(pass>30){return state.pass[1]=true;}\n        }\n        let y;\n        pass=0;\n        const theNumberOfCards=state.allCards.cardOpponent.length\n        for(;;){\n            y=Math.floor(Math.random() * theNumberOfCards)\n            if(state.allCards.cardOpponent[y].position===50){break;}\n            pass++;\n            if(pass>30){return state.pass[1]=true;}\n        }\n\n        const newResults4=state.results;\n        const newAllCards2={...state.allCards}\n        newResults4[x]=y;\n        newAllCards2.cardOpponent[y].position=x;\n            return {...state,\n                results:newResults4,\n                allCards:{...newAllCards2},\n            }\n    }}\n    const endTurn=(newAllCards1,newAllCards2)=>{\n        playOponents();\n        newAllCards1=defense(newAllCards1,0,10,newAllCards2)\n        newAllCards2=defense(newAllCards2,10,0,newAllCards1)\n        newAllCards1=delteCard(newAllCards1)\n        newAllCards2=delteCard(newAllCards2)\n        return {...state,\n            allCards:{\n                cardOpponent:newAllCards1,\n                cards:newAllCards2,\n        }}\n    }\n    const endGame=(newState)=>{\n        console.log('endGame')\n        let lifePlayer=0;\n        let lifeOpponent=0;\n        newState.allCards.cards.map((card)=>{\n            if(card.position<=20){\n                 lifePlayer=lifePlayer+card.value.life\n            }\n\n        })\n        newState.allCards.cardOpponent.map((card)=>{\n            if(card.position<=20){\n                 lifeOpponent=lifeOpponent+card.value.life\n            }\n            \n        })\n        if(lifePlayer>lifeOpponent){\n            alert('winnner')\n        }else{\n            if(lifePlayer<lifeOpponent){\n                alert('remis')\n            }\n            else{\n                alert('failed')\n            }\n        }\n    }\n    const distributionCard=()=>{\n        const theNumberOfCards=cardAttributes.length\n        const newState={...state.allCards};\n        newState.cards.map((card)=>{\n            const idCard=Math.floor(Math.random() * theNumberOfCards)\n            card.position=50;\n            card.value={...cardAttributes[idCard]};\n            card.pictures=cardPictures[idCard]\n        });\n        newState.cardOpponent.map((card)=>{\n            const idCard=Math.floor(Math.random() * theNumberOfCards)\n            card.position=50;\n            card.value={...cardAttributes[idCard]};\n            card.pictures=cardPictures[idCard]\n        });\n        return{allCards:{...newState}};\n    }\n    switch ( action.type ) {\n        case 'PLAY_THE_CARD':\n            const newResults=state.results;\n            const newAllCards={...state.allCards}\n            newResults[action.id]=action.val;\n            if(newAllCards.cards[action.val].position<=20){\n                newResults[newAllCards.cards[action.val].position]=false;\n            }\n            newAllCards.cards[action.val].position=action.id;\n                return {...state,\n                    results:newResults,\n                    allCards:{...newAllCards},\n                }\n        case 'CARDGO':\n            const newResults3=state.results;\n            const newAllCard={...state.allCards}\n            newResults3[newAllCard.cards[action.val].position]=false;\n            newAllCard.cards[action.val].position=action.fieldPlayed;\n                return {...state,\n                    results:newResults3,\n                    allCards:{...newAllCard},\n                }\n        case 'PASS':\n            if(state.pass[1]){\n                endGame({...state});\n            }else{\n                let newAllCards1={...state}\n                for(;!state.pass[1];){\n                    newAllCards1={...endTurn(\n                        newAllCards1.allCards.cardOpponent,\n                        newAllCards1.allCards.cards)}\n                }\n                endGame({...newAllCards1});\n                return {\n                    ...state,\n                    ...newAllCards1}\n\n            }\n        case 'NEWGAME':\n            const newResults1=state.results.map((value,i)=>{return value=false})\n            return{...state,\n                results:newResults1,\n                ...distributionCard(),\n                pass:[false,false],};\n        case 'GIVEAWAYTHECARS':\n            return{...state,\n                ...distributionCard()};\n        case 'ENDTURN':\n                let newAllCards1=state.allCards.cardOpponent//mozliwe do poprawy !!!\n                let newAllCards2=state.allCards.cards\n                return {...endTurn(newAllCards1,newAllCards2)}\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}