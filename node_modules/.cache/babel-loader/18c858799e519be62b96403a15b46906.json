{"ast":null,"code":"import _objectSpread from \"/media/mickuki/f37c4816-231b-487c-8f5f-b372b930c30c/web_master/programist-war/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport * as actionTypes from '../actions';\nimport * as cardAttributes from '../../components/Game/Cards/cardAttributes';\nimport math from 'mathjs';\nconst initialState = {\n  results: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false],\n  allCards: {\n    cards: [{\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }],\n    cardOpponent: [{\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }]\n  }\n};\n\nconst reducer = (state = initialState, action) => {\n  const attack = (newAllCards1, direction, attack1, attack2) => {\n    //alert('a'+direction)\n    //const newAllCards1={...state.allCards}\n    if (attack2) {\n      if (state.results[direction]) {\n        if (state.results[direction + 5]) {\n          //alert(1)\n          newAllCards1[state.results[direction]].value.life -= attack1;\n          newAllCards1[state.results[direction + 5]].value.life -= attack2;\n        } else {\n          //alert(5)\n          newAllCards1[state.results[direction]].value.life -= attack1 + attack2;\n        }\n      } else if (state.results[direction + 5]) {\n        //alert(2)\n        newAllCards1[state.results[direction + 5]].value.life -= attack1 + attack2;\n      }\n    } else {\n      if (state.results[direction]) {\n        //alert(3)\n        newAllCards1[state.results[direction]].value.life -= attack1;\n      } else if (state.results[direction + 5]) {\n        //alert(4)\n        newAllCards1[state.results[direction + 5]].value.life -= attack1;\n      }\n    }\n\n    return newAllCards1;\n  };\n\n  const delteCard = newCards => {\n    newCards.map((card, i) => {\n      if (card.value.life < 1) {\n        return () => {\n          newCards.splice(i, 1);\n        };\n      }\n    });\n    return newCards; //newCards.splice(0, 1);\n  };\n\n  const defense = (newAllCards1, x, y) => {\n    for (let i = 0; i < 5; i++) {\n      if (state.results[i + x]) {\n        if (state.results[i + 5 + x]) {\n          newAllCards1 = attack(newAllCards1, i + y, 1, 1);\n        } else {\n          newAllCards1 = attack(newAllCards1, i + y, 1);\n        }\n      } else if (state.results[i + 5 + x]) {\n        newAllCards1 = attack(newAllCards1, i + y, 1);\n      }\n    }\n\n    return newAllCards1;\n  };\n\n  const playOponents = () => {\n    //tymczasowy bott x=id pola y karta\n    let x;\n    let pass = 0;\n\n    for (;;) {\n      x = Math.floor(Math.random() * 10) + 10;\n\n      if (state.results[x] == false) {\n        break;\n      }\n\n      pass++;\n\n      if (pass > 30) {\n        return;\n      } //fukcja pass\n\n    }\n\n    let y;\n    pass = 0;\n\n    for (;;) {\n      y = Math.floor(Math.random() * 10);\n\n      if (state.allCards.cardOpponent[y].position == 50) {\n        break;\n      }\n\n      pass++;\n\n      if (pass > 30) {\n        return;\n      } //fukcja pass\n\n    }\n\n    const newResults4 = state.results;\n\n    const newAllCards2 = _objectSpread({}, state.allCards);\n\n    newResults4[x] = y;\n    newAllCards2.cardOpponent[y].position = x;\n    return _objectSpread({}, state, {\n      results: newResults4,\n      allCards: _objectSpread({}, newAllCards2)\n    });\n  };\n\n  switch (action.type) {\n    case 'PLAY_THE_CARD':\n      const newResults = state.results;\n\n      const newAllCards = _objectSpread({}, state.allCards);\n\n      newResults[action.id] = action.val;\n      newAllCards.cards[action.val].position = action.id;\n      return _objectSpread({}, state, {\n        results: newResults,\n        allCards: _objectSpread({}, newAllCards)\n      });\n\n    case 'GIVEAWAYTHECARS':\n      const newState = _objectSpread({}, state.allCards);\n\n      newState.cards.map(card => {\n        card.position = 50;\n        card.value = _objectSpread({}, cardAttributes.PIXEL); //do zmiany\n      });\n      newState.cardOpponent.map(card => {\n        card.position = 50;\n        card.value = _objectSpread({}, cardAttributes.PIXEL); //do zmiany\n      });\n      return _objectSpread({}, state, {\n        allCards: _objectSpread({}, newState)\n      });\n\n    case 'ENDTURN':\n      playOponents();\n      const newAllCards1 = state.allCards.cardOpponent; //mozliwe do poprawy !!!\n\n      const newAllCards2 = state.allCards.cards;\n      return _objectSpread({}, state, {\n        allCards: {\n          cardOpponent: delteCard(defense(newAllCards1, 0, 10)),\n          cards: delteCard(defense(newAllCards2, 10, 0))\n        }\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/media/mickuki/f37c4816-231b-487c-8f5f-b372b930c30c/web_master/programist-war/src/store/reducers/table.js"],"names":["actionTypes","cardAttributes","math","initialState","results","allCards","cards","position","cardOpponent","reducer","state","action","attack","newAllCards1","direction","attack1","attack2","value","life","delteCard","newCards","map","card","i","splice","defense","x","y","playOponents","pass","Math","floor","random","newResults4","newAllCards2","type","newResults","newAllCards","id","val","newState","PIXEL"],"mappings":"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","sourcesContent":["import * as actionTypes from '../actions';\nimport * as cardAttributes from '../../components/Game/Cards/cardAttributes';\nimport math from 'mathjs';\n\nconst initialState = {\n    results: [false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false],\n    allCards:{\n        cards:[{position:40},\n            {position:40},\n            {position:40},\n            {position:40},\n            {position:40},\n            {position:40},\n            {position:40},\n            {position:40},\n            {position:40},\n            {position:40},\n            {position:40},\n            {position:40}],\n        cardOpponent:[{position:40},\n            {position:40},\n            {position:40},\n            {position:40},\n            {position:40},\n            {position:40},\n            {position:40},\n            {position:40},\n            {position:40},\n            {position:40},\n            {position:40},\n            {position:40}]\n    }\n};\n\nconst reducer = ( state = initialState, action) => {\n\n\n    const attack =(newAllCards1,direction,attack1,attack2)=>{//alert('a'+direction)\n        //const newAllCards1={...state.allCards}\n        if(attack2){\n            if(state.results[direction]){\n                if(state.results[direction+5]){//alert(1)\n                    newAllCards1[state.results[direction]].value.life-=(attack1);\n                    newAllCards1[state.results[direction+5]].value.life-=(attack2);\n                }else{//alert(5)\n                    newAllCards1[state.results[direction]].value.life-=(attack1+attack2);\n                }\n            }else\n            if(state.results[direction+5]){//alert(2)\n                newAllCards1[state.results[direction+5]].value.life-=(attack1+attack2);\n            }\n        }else{\n            if(state.results[direction]){//alert(3)\n                newAllCards1[state.results[direction]].value.life-=(attack1);\n            }else\n            if(state.results[direction+5]){//alert(4)\n                newAllCards1[state.results[direction+5]].value.life-=(attack1);\n            }\n        }\n        return newAllCards1;\n    }\n    const delteCard=(newCards)=>{\n        newCards.map((card,i)=>{\n            if(card.value.life<1){\n                return ()=>{newCards.splice(i, 1);}\n            }\n        })\n        return newCards\n        //newCards.splice(0, 1);\n    }\n\n    const defense =(newAllCards1,x,y)=>{\n        for(let i=0;i<5;i++){\n            if(state.results[i+x]){\n                if(state.results[i+5+x]){\n                    newAllCards1=attack(newAllCards1,i+y,1,1);\n                }else{\n                    newAllCards1=attack(newAllCards1,i+y,1);\n                }\n            }else\n            if(state.results[i+5+x]){\n                newAllCards1=attack(newAllCards1,i+y,1);\n            }\n        }\n        return newAllCards1;\n    }\n    const playOponents=()=>{//tymczasowy bott x=id pola y karta\n        let x;\n        let pass=0;\n        for(;;){\n            x=Math.floor(Math.random() * 10)+10;\n            if(state.results[x]==false){break;}\n            pass++;\n            if(pass>30){return}//fukcja pass\n        }\n        let y;\n        pass=0;\n        for(;;){\n            y=Math.floor(Math.random() * 10)\n            if(state.allCards.cardOpponent[y].position==50){break;}\n            pass++;\n            if(pass>30){return}//fukcja pass\n        }\n\n        const newResults4=state.results;\n        const newAllCards2={...state.allCards}\n        newResults4[x]=y;\n        newAllCards2.cardOpponent[y].position=x;\n            return {...state,\n                results:newResults4,\n                allCards:{...newAllCards2},\n            }\n    }\n\n    switch ( action.type ) {\n        case 'PLAY_THE_CARD':\n            const newResults=state.results;\n            const newAllCards={...state.allCards}\n            newResults[action.id]=action.val;\n            newAllCards.cards[action.val].position=action.id;\n                return {...state,\n                    results:newResults,\n                    allCards:{...newAllCards},\n                }\n        case 'GIVEAWAYTHECARS':\n            const newState={...state.allCards};\n            newState.cards.map((card)=>{\n                card.position=50;\n                card.value={...cardAttributes.PIXEL};//do zmiany\n            });\n            newState.cardOpponent.map((card)=>{\n                card.position=50;\n                card.value={...cardAttributes.PIXEL};//do zmiany\n            });\n            return{...state,\n                allCards:{...newState}};\n        case 'ENDTURN':\n            playOponents();\n            const newAllCards1=state.allCards.cardOpponent//mozliwe do poprawy !!!\n            const newAllCards2=state.allCards.cards\n            return {...state,\n                allCards:{\n                    cardOpponent:delteCard(defense(newAllCards1,0,10)),\n                    cards:delteCard(defense(newAllCards2,10,0)),\n\n            }}\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}