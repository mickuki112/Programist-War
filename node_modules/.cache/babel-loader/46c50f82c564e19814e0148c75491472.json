{"ast":null,"code":"import _objectSpread from \"/media/mickuki/f37c4816-231b-487c-8f5f-b372b930c30c/web_master/programist-war/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport * as actionTypes from '../actions';\nimport * as cardAttributes from '../../components/Game/Cards/cardAttributes';\nimport * as cardPictures from '../../components/Game/Cards/cardPictures';\nimport math from 'mathjs';\nconst initialState = {\n  results: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false],\n  allCards: {\n    cards: [{\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }],\n    cardOpponent: [{\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }]\n  }\n};\n\nconst reducer = (state = initialState, action) => {\n  const attack = (newAllCards1, direction, attack1, attack2) => {\n    //alert('a'+direction)\n    //const newAllCards1={...state.allCards}\n    if (attack2) {\n      //const def1=newAllCards1[state.results[direction]].value.defense\n      //const def2=newAllCards1[state.results[direction+5]].value.defense\n      //for optimization!!!\n      if (state.results[direction]) {\n        const def1 = newAllCards1[state.results[direction]].value.defense;\n\n        if (state.results[direction + 5]) {\n          //alert(1)\n          const def2 = newAllCards1[state.results[direction + 5]].value.defense;\n          newAllCards1[state.results[direction]].value.life -= attack1 - def1;\n          newAllCards1[state.results[direction + 5]].value.life -= attack2 - def2;\n        } else {\n          //alert(5)\n          newAllCards1[state.results[direction]].value.life -= attack1 + attack2 - def1;\n        }\n      } else if (state.results[direction + 5]) {\n        //alert(2)\n        const def2 = newAllCards1[state.results[direction + 5]].value.defense;\n        newAllCards1[state.results[direction + 5]].value.life -= attack1 + attack2 - def2;\n      }\n    } else if (attack1) {\n      if (state.results[direction]) {\n        //alert(3)\n        const def1 = newAllCards1[state.results[direction]].value.defense;\n        newAllCards1[state.results[direction]].value.life -= attack1 - def1;\n      } else if (state.results[direction + 5]) {\n        //alert(4)\n        const def2 = newAllCards1[state.results[direction + 5]].value.defense;\n        newAllCards1[state.results[direction + 5]].value.life -= attack1 - def2;\n      }\n    }\n\n    return newAllCards1;\n  };\n\n  const delteCard = newCards => {\n    newCards.map((card, i) => {\n      if (card.value.life <= 0) {\n        //newCards.splice(i, 1);\n        state.results.map((val, j) => {\n          if (val === i) {\n            //card.position=40;\n            //newCards[val].position=40;\n            newCards[state.results[j]].position = 40;\n            state.results[j] = false;\n            return newCards; //return\n          }\n        });\n      }\n    });\n    return newCards; //newCards.splice(0, 1);\n  };\n\n  const defense = (newAllCards1, x, y, def) => {\n    for (let i = 0; i < 5; i++) {\n      if (state.results[i + x]) {\n        const attack1 = def[state.results[i + x]].value.atack;\n\n        if (state.results[i + 5 + x]) {\n          newAllCards1 = attack(newAllCards1, i + y, attack1, def[state.results[i + x + 5]].value.atack);\n        } else {\n          newAllCards1 = attack(newAllCards1, i + y, attack1);\n        }\n      } else if (state.results[i + 5 + x]) {\n        newAllCards1 = attack(newAllCards1, i + y, false, def[state.results[i + x + 5]].value.atack);\n      }\n    }\n\n    return newAllCards1;\n  };\n\n  const playOponents = () => {\n    //tymczasowy bott x=id pola y karta\n    let x;\n    let pass = 0;\n\n    for (;;) {\n      x = Math.floor(Math.random() * 10) + 10;\n\n      if (state.results[x] === false) {\n        break;\n      }\n\n      pass++;\n\n      if (pass > 30) {\n        return;\n      } //fukcja pass\n\n    }\n\n    let y;\n    pass = 0;\n\n    for (;;) {\n      y = Math.floor(Math.random() * 10);\n\n      if (state.allCards.cardOpponent[y].position === 50) {\n        break;\n      }\n\n      pass++;\n\n      if (pass > 30) {\n        return;\n      } //fukcja pass\n\n    }\n\n    const newResults4 = state.results;\n\n    const newAllCards2 = _objectSpread({}, state.allCards);\n\n    newResults4[x] = y;\n    newAllCards2.cardOpponent[y].position = x;\n    return _objectSpread({}, state, {\n      results: newResults4,\n      allCards: _objectSpread({}, newAllCards2)\n    });\n  };\n\n  switch (action.type) {\n    case 'PLAY_THE_CARD':\n      const newResults = state.results;\n\n      const newAllCards = _objectSpread({}, state.allCards);\n\n      newResults[action.id] = action.val;\n      newAllCards.cards[action.val].position = action.id;\n      return _objectSpread({}, state, {\n        results: newResults,\n        allCards: _objectSpread({}, newAllCards)\n      });\n\n    case 'GIVEAWAYTHECARS':\n      const newState = _objectSpread({}, state.allCards);\n\n      newState.cards.map(card => {\n        card.position = 50;\n        card.value = _objectSpread({}, cardAttributes.PIXEL); //do zmiany\n\n        card.pictures = cardPictures.PIXEL;\n      });\n      newState.cardOpponent.map(card => {\n        card.position = 50;\n        card.value = _objectSpread({}, cardAttributes.PIXEL); //do zmiany\n\n        card.pictures = cardPictures.PIXEL;\n      });\n      return _objectSpread({}, state, {\n        allCards: _objectSpread({}, newState)\n      });\n\n    case 'ENDTURN':\n      playOponents();\n      let newAllCards1 = state.allCards.cardOpponent; //mozliwe do poprawy !!!\n\n      let newAllCards2 = state.allCards.cards;\n      newAllCards1 = defense(newAllCards1, 0, 10, newAllCards2);\n      newAllCards2 = defense(newAllCards2, 10, 0, newAllCards1);\n      newAllCards1 = delteCard(newAllCards1);\n      newAllCards2 = delteCard(newAllCards2);\n      return _objectSpread({}, state, {\n        allCards: {\n          cardOpponent: newAllCards1,\n          cards: newAllCards2\n        }\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/media/mickuki/f37c4816-231b-487c-8f5f-b372b930c30c/web_master/programist-war/src/store/reducers/table.js"],"names":["actionTypes","cardAttributes","cardPictures","math","initialState","results","allCards","cards","position","cardOpponent","reducer","state","action","attack","newAllCards1","direction","attack1","attack2","def1","value","defense","def2","life","delteCard","newCards","map","card","i","val","j","x","y","def","atack","playOponents","pass","Math","floor","random","newResults4","newAllCards2","type","newResults","newAllCards","id","newState","PIXEL","pictures"],"mappings":";AAAA,OAAO,KAAKA,WAAZ,MAA6B,YAA7B;AACA,OAAO,KAAKC,cAAZ,MAAgC,4CAAhC;AACA,OAAO,KAAKC,YAAZ,MAA8B,0CAA9B;AAEA,OAAOC,IAAP,MAAiB,QAAjB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAE,CAAC,KAAD,EAAO,KAAP,EAAa,KAAb,EAAmB,KAAnB,EAAyB,KAAzB,EAA+B,KAA/B,EAAqC,KAArC,EAA2C,KAA3C,EAAiD,KAAjD,EAAuD,KAAvD,EAA6D,KAA7D,EAAmE,KAAnE,EAAyE,KAAzE,EAA+E,KAA/E,EAAqF,KAArF,EAA2F,KAA3F,EAAiG,KAAjG,EAAuG,KAAvG,EAA6G,KAA7G,EAAmH,KAAnH,CADQ;AAEjBC,EAAAA,QAAQ,EAAC;AACLC,IAAAA,KAAK,EAAC,CAAC;AAACC,MAAAA,QAAQ,EAAC;AAAV,KAAD,EACF;AAACA,MAAAA,QAAQ,EAAC;AAAV,KADE,EAEF;AAACA,MAAAA,QAAQ,EAAC;AAAV,KAFE,EAGF;AAACA,MAAAA,QAAQ,EAAC;AAAV,KAHE,EAIF;AAACA,MAAAA,QAAQ,EAAC;AAAV,KAJE,EAKF;AAACA,MAAAA,QAAQ,EAAC;AAAV,KALE,EAMF;AAACA,MAAAA,QAAQ,EAAC;AAAV,KANE,EAOF;AAACA,MAAAA,QAAQ,EAAC;AAAV,KAPE,EAQF;AAACA,MAAAA,QAAQ,EAAC;AAAV,KARE,EASF;AAACA,MAAAA,QAAQ,EAAC;AAAV,KATE,EAUF;AAACA,MAAAA,QAAQ,EAAC;AAAV,KAVE,EAWF;AAACA,MAAAA,QAAQ,EAAC;AAAV,KAXE,CADD;AAaLC,IAAAA,YAAY,EAAC,CAAC;AAACD,MAAAA,QAAQ,EAAC;AAAV,KAAD,EACT;AAACA,MAAAA,QAAQ,EAAC;AAAV,KADS,EAET;AAACA,MAAAA,QAAQ,EAAC;AAAV,KAFS,EAGT;AAACA,MAAAA,QAAQ,EAAC;AAAV,KAHS,EAIT;AAACA,MAAAA,QAAQ,EAAC;AAAV,KAJS,EAKT;AAACA,MAAAA,QAAQ,EAAC;AAAV,KALS,EAMT;AAACA,MAAAA,QAAQ,EAAC;AAAV,KANS,EAOT;AAACA,MAAAA,QAAQ,EAAC;AAAV,KAPS,EAQT;AAACA,MAAAA,QAAQ,EAAC;AAAV,KARS,EAST;AAACA,MAAAA,QAAQ,EAAC;AAAV,KATS,EAUT;AAACA,MAAAA,QAAQ,EAAC;AAAV,KAVS,EAWT;AAACA,MAAAA,QAAQ,EAAC;AAAV,KAXS;AAbR;AAFQ,CAArB;;AA8BA,MAAME,OAAO,GAAG,CAAEC,KAAK,GAAGP,YAAV,EAAwBQ,MAAxB,KAAmC;AAG/C,QAAMC,MAAM,GAAE,CAACC,YAAD,EAAcC,SAAd,EAAwBC,OAAxB,EAAgCC,OAAhC,KAA0C;AAAC;AACrD;AACA,QAAGA,OAAH,EAAW;AACP;AACA;AACA;AACA,UAAGN,KAAK,CAACN,OAAN,CAAcU,SAAd,CAAH,EAA4B;AACxB,cAAMG,IAAI,GAACJ,YAAY,CAACH,KAAK,CAACN,OAAN,CAAcU,SAAd,CAAD,CAAZ,CAAuCI,KAAvC,CAA6CC,OAAxD;;AACA,YAAGT,KAAK,CAACN,OAAN,CAAcU,SAAS,GAAC,CAAxB,CAAH,EAA8B;AAAC;AAC3B,gBAAMM,IAAI,GAACP,YAAY,CAACH,KAAK,CAACN,OAAN,CAAcU,SAAS,GAAC,CAAxB,CAAD,CAAZ,CAAyCI,KAAzC,CAA+CC,OAA1D;AACAN,UAAAA,YAAY,CAACH,KAAK,CAACN,OAAN,CAAcU,SAAd,CAAD,CAAZ,CAAuCI,KAAvC,CAA6CG,IAA7C,IAAoDN,OAAO,GAACE,IAA5D;AACAJ,UAAAA,YAAY,CAACH,KAAK,CAACN,OAAN,CAAcU,SAAS,GAAC,CAAxB,CAAD,CAAZ,CAAyCI,KAAzC,CAA+CG,IAA/C,IAAsDL,OAAO,GAACI,IAA9D;AACH,SAJD,MAIK;AAAC;AACFP,UAAAA,YAAY,CAACH,KAAK,CAACN,OAAN,CAAcU,SAAd,CAAD,CAAZ,CAAuCI,KAAvC,CAA6CG,IAA7C,IAAoDN,OAAO,GAACC,OAAR,GAAgBC,IAApE;AACH;AACJ,OATD,MAUA,IAAGP,KAAK,CAACN,OAAN,CAAcU,SAAS,GAAC,CAAxB,CAAH,EAA8B;AAAC;AAC3B,cAAMM,IAAI,GAACP,YAAY,CAACH,KAAK,CAACN,OAAN,CAAcU,SAAS,GAAC,CAAxB,CAAD,CAAZ,CAAyCI,KAAzC,CAA+CC,OAA1D;AACAN,QAAAA,YAAY,CAACH,KAAK,CAACN,OAAN,CAAcU,SAAS,GAAC,CAAxB,CAAD,CAAZ,CAAyCI,KAAzC,CAA+CG,IAA/C,IAAsDN,OAAO,GAACC,OAAR,GAAgBI,IAAtE;AACH;AACJ,KAlBD,MAkBM,IAAGL,OAAH,EAAW;AACb,UAAGL,KAAK,CAACN,OAAN,CAAcU,SAAd,CAAH,EAA4B;AAAC;AACzB,cAAMG,IAAI,GAACJ,YAAY,CAACH,KAAK,CAACN,OAAN,CAAcU,SAAd,CAAD,CAAZ,CAAuCI,KAAvC,CAA6CC,OAAxD;AACAN,QAAAA,YAAY,CAACH,KAAK,CAACN,OAAN,CAAcU,SAAd,CAAD,CAAZ,CAAuCI,KAAvC,CAA6CG,IAA7C,IAAoDN,OAAO,GAACE,IAA5D;AACH,OAHD,MAIA,IAAGP,KAAK,CAACN,OAAN,CAAcU,SAAS,GAAC,CAAxB,CAAH,EAA8B;AAAC;AAC3B,cAAMM,IAAI,GAACP,YAAY,CAACH,KAAK,CAACN,OAAN,CAAcU,SAAS,GAAC,CAAxB,CAAD,CAAZ,CAAyCI,KAAzC,CAA+CC,OAA1D;AACAN,QAAAA,YAAY,CAACH,KAAK,CAACN,OAAN,CAAcU,SAAS,GAAC,CAAxB,CAAD,CAAZ,CAAyCI,KAAzC,CAA+CG,IAA/C,IAAsDN,OAAO,GAACK,IAA9D;AACH;AACJ;;AACD,WAAOP,YAAP;AACH,GA/BD;;AAgCA,QAAMS,SAAS,GAAEC,QAAD,IAAY;AACxBA,IAAAA,QAAQ,CAACC,GAAT,CAAa,CAACC,IAAD,EAAMC,CAAN,KAAU;AACnB,UAAGD,IAAI,CAACP,KAAL,CAAWG,IAAX,IAAiB,CAApB,EAAsB;AAClB;AACQX,QAAAA,KAAK,CAACN,OAAN,CAAcoB,GAAd,CAAkB,CAACG,GAAD,EAAKC,CAAL,KAAS;AACvB,cAAGD,GAAG,KAAGD,CAAT,EAAW;AACP;AACA;AACAH,YAAAA,QAAQ,CAACb,KAAK,CAACN,OAAN,CAAcwB,CAAd,CAAD,CAAR,CAA2BrB,QAA3B,GAAoC,EAApC;AACAG,YAAAA,KAAK,CAACN,OAAN,CAAcwB,CAAd,IAAiB,KAAjB;AACA,mBAAOL,QAAP,CALO,CAMP;AACH;AACJ,SATD;AAUX;AACJ,KAdD;AAeA,WAAOA,QAAP,CAhBwB,CAiBxB;AACH,GAlBD;;AAoBA,QAAMJ,OAAO,GAAE,CAACN,YAAD,EAAcgB,CAAd,EAAgBC,CAAhB,EAAkBC,GAAlB,KAAwB;AACnC,SAAI,IAAIL,CAAC,GAAC,CAAV,EAAYA,CAAC,GAAC,CAAd,EAAgBA,CAAC,EAAjB,EAAoB;AAChB,UAAGhB,KAAK,CAACN,OAAN,CAAcsB,CAAC,GAACG,CAAhB,CAAH,EAAsB;AAClB,cAAMd,OAAO,GAACgB,GAAG,CAACrB,KAAK,CAACN,OAAN,CAAcsB,CAAC,GAACG,CAAhB,CAAD,CAAH,CAAwBX,KAAxB,CAA8Bc,KAA5C;;AACA,YAAGtB,KAAK,CAACN,OAAN,CAAcsB,CAAC,GAAC,CAAF,GAAIG,CAAlB,CAAH,EAAwB;AACpBhB,UAAAA,YAAY,GAACD,MAAM,CAACC,YAAD,EAAca,CAAC,GAACI,CAAhB,EAAkBf,OAAlB,EAA0BgB,GAAG,CAACrB,KAAK,CAACN,OAAN,CAAcsB,CAAC,GAACG,CAAF,GAAI,CAAlB,CAAD,CAAH,CAA0BX,KAA1B,CAAgCc,KAA1D,CAAnB;AACH,SAFD,MAEK;AACDnB,UAAAA,YAAY,GAACD,MAAM,CAACC,YAAD,EAAca,CAAC,GAACI,CAAhB,EAAkBf,OAAlB,CAAnB;AACH;AACJ,OAPD,MAQA,IAAGL,KAAK,CAACN,OAAN,CAAcsB,CAAC,GAAC,CAAF,GAAIG,CAAlB,CAAH,EAAwB;AACpBhB,QAAAA,YAAY,GAACD,MAAM,CAACC,YAAD,EAAca,CAAC,GAACI,CAAhB,EAAkB,KAAlB,EAAwBC,GAAG,CAACrB,KAAK,CAACN,OAAN,CAAcsB,CAAC,GAACG,CAAF,GAAI,CAAlB,CAAD,CAAH,CAA0BX,KAA1B,CAAgCc,KAAxD,CAAnB;AACH;AACJ;;AACD,WAAOnB,YAAP;AACH,GAfD;;AAgBA,QAAMoB,YAAY,GAAC,MAAI;AAAC;AACpB,QAAIJ,CAAJ;AACA,QAAIK,IAAI,GAAC,CAAT;;AACA,aAAO;AACHL,MAAAA,CAAC,GAACM,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,IAA+B,EAAjC;;AACA,UAAG3B,KAAK,CAACN,OAAN,CAAcyB,CAAd,MAAmB,KAAtB,EAA4B;AAAC;AAAO;;AACpCK,MAAAA,IAAI;;AACJ,UAAGA,IAAI,GAAC,EAAR,EAAW;AAAC;AAAO,OAJhB,CAIgB;;AACtB;;AACD,QAAIJ,CAAJ;AACAI,IAAAA,IAAI,GAAC,CAAL;;AACA,aAAO;AACHJ,MAAAA,CAAC,GAACK,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,CAAF;;AACA,UAAG3B,KAAK,CAACL,QAAN,CAAeG,YAAf,CAA4BsB,CAA5B,EAA+BvB,QAA/B,KAA0C,EAA7C,EAAgD;AAAC;AAAO;;AACxD2B,MAAAA,IAAI;;AACJ,UAAGA,IAAI,GAAC,EAAR,EAAW;AAAC;AAAO,OAJhB,CAIgB;;AACtB;;AAED,UAAMI,WAAW,GAAC5B,KAAK,CAACN,OAAxB;;AACA,UAAMmC,YAAY,qBAAK7B,KAAK,CAACL,QAAX,CAAlB;;AACAiC,IAAAA,WAAW,CAACT,CAAD,CAAX,GAAeC,CAAf;AACAS,IAAAA,YAAY,CAAC/B,YAAb,CAA0BsB,CAA1B,EAA6BvB,QAA7B,GAAsCsB,CAAtC;AACI,6BAAWnB,KAAX;AACIN,MAAAA,OAAO,EAACkC,WADZ;AAEIjC,MAAAA,QAAQ,oBAAKkC,YAAL;AAFZ;AAIP,GA1BD;;AA4BA,UAAS5B,MAAM,CAAC6B,IAAhB;AACI,SAAK,eAAL;AACI,YAAMC,UAAU,GAAC/B,KAAK,CAACN,OAAvB;;AACA,YAAMsC,WAAW,qBAAKhC,KAAK,CAACL,QAAX,CAAjB;;AACAoC,MAAAA,UAAU,CAAC9B,MAAM,CAACgC,EAAR,CAAV,GAAsBhC,MAAM,CAACgB,GAA7B;AACAe,MAAAA,WAAW,CAACpC,KAAZ,CAAkBK,MAAM,CAACgB,GAAzB,EAA8BpB,QAA9B,GAAuCI,MAAM,CAACgC,EAA9C;AACI,+BAAWjC,KAAX;AACIN,QAAAA,OAAO,EAACqC,UADZ;AAEIpC,QAAAA,QAAQ,oBAAKqC,WAAL;AAFZ;;AAIR,SAAK,iBAAL;AACI,YAAME,QAAQ,qBAAKlC,KAAK,CAACL,QAAX,CAAd;;AACAuC,MAAAA,QAAQ,CAACtC,KAAT,CAAekB,GAAf,CAAoBC,IAAD,IAAQ;AACvBA,QAAAA,IAAI,CAAClB,QAAL,GAAc,EAAd;AACAkB,QAAAA,IAAI,CAACP,KAAL,qBAAelB,cAAc,CAAC6C,KAA9B,EAFuB,CAEc;;AACrCpB,QAAAA,IAAI,CAACqB,QAAL,GAAc7C,YAAY,CAAC4C,KAA3B;AACH,OAJD;AAKAD,MAAAA,QAAQ,CAACpC,YAAT,CAAsBgB,GAAtB,CAA2BC,IAAD,IAAQ;AAC9BA,QAAAA,IAAI,CAAClB,QAAL,GAAc,EAAd;AACAkB,QAAAA,IAAI,CAACP,KAAL,qBAAelB,cAAc,CAAC6C,KAA9B,EAF8B,CAEO;;AACrCpB,QAAAA,IAAI,CAACqB,QAAL,GAAc7C,YAAY,CAAC4C,KAA3B;AACH,OAJD;AAKA,+BAAUnC,KAAV;AACIL,QAAAA,QAAQ,oBAAKuC,QAAL;AADZ;;AAEJ,SAAK,SAAL;AACIX,MAAAA,YAAY;AACZ,UAAIpB,YAAY,GAACH,KAAK,CAACL,QAAN,CAAeG,YAAhC,CAFJ,CAEgD;;AAC5C,UAAI+B,YAAY,GAAC7B,KAAK,CAACL,QAAN,CAAeC,KAAhC;AACAO,MAAAA,YAAY,GAACM,OAAO,CAACN,YAAD,EAAc,CAAd,EAAgB,EAAhB,EAAmB0B,YAAnB,CAApB;AACAA,MAAAA,YAAY,GAACpB,OAAO,CAACoB,YAAD,EAAc,EAAd,EAAiB,CAAjB,EAAmB1B,YAAnB,CAApB;AACAA,MAAAA,YAAY,GAACS,SAAS,CAACT,YAAD,CAAtB;AACA0B,MAAAA,YAAY,GAACjB,SAAS,CAACiB,YAAD,CAAtB;AACA,+BAAW7B,KAAX;AACIL,QAAAA,QAAQ,EAAC;AACLG,UAAAA,YAAY,EAACK,YADR;AAELP,UAAAA,KAAK,EAACiC;AAFD;AADb;;AAMJ;AACI,aAAO7B,KAAP;AAvCR;AAyCH,CA5ID;;AA8IA,eAAeD,OAAf","sourcesContent":["import * as actionTypes from '../actions';\nimport * as cardAttributes from '../../components/Game/Cards/cardAttributes';\nimport * as cardPictures from '../../components/Game/Cards/cardPictures';\n\nimport math from 'mathjs';\n\nconst initialState = {\n    results: [false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false],\n    allCards:{\n        cards:[{position:40},\n            {position:40},\n            {position:40},\n            {position:40},\n            {position:40},\n            {position:40},\n            {position:40},\n            {position:40},\n            {position:40},\n            {position:40},\n            {position:40},\n            {position:40}],\n        cardOpponent:[{position:40},\n            {position:40},\n            {position:40},\n            {position:40},\n            {position:40},\n            {position:40},\n            {position:40},\n            {position:40},\n            {position:40},\n            {position:40},\n            {position:40},\n            {position:40}]\n    }\n};\n\nconst reducer = ( state = initialState, action) => {\n\n\n    const attack =(newAllCards1,direction,attack1,attack2)=>{//alert('a'+direction)\n        //const newAllCards1={...state.allCards}\n        if(attack2){\n            //const def1=newAllCards1[state.results[direction]].value.defense\n            //const def2=newAllCards1[state.results[direction+5]].value.defense\n            //for optimization!!!\n            if(state.results[direction]){\n                const def1=newAllCards1[state.results[direction]].value.defense\n                if(state.results[direction+5]){//alert(1)\n                    const def2=newAllCards1[state.results[direction+5]].value.defense\n                    newAllCards1[state.results[direction]].value.life-=(attack1-def1);\n                    newAllCards1[state.results[direction+5]].value.life-=(attack2-def2);\n                }else{//alert(5)\n                    newAllCards1[state.results[direction]].value.life-=(attack1+attack2-def1);\n                }\n            }else\n            if(state.results[direction+5]){//alert(2)\n                const def2=newAllCards1[state.results[direction+5]].value.defense\n                newAllCards1[state.results[direction+5]].value.life-=(attack1+attack2-def2);\n            }\n        }else if(attack1){\n            if(state.results[direction]){//alert(3)\n                const def1=newAllCards1[state.results[direction]].value.defense\n                newAllCards1[state.results[direction]].value.life-=(attack1-def1);\n            }else\n            if(state.results[direction+5]){//alert(4)\n                const def2=newAllCards1[state.results[direction+5]].value.defense\n                newAllCards1[state.results[direction+5]].value.life-=(attack1-def2);\n            }\n        }\n        return newAllCards1;\n    }\n    const delteCard=(newCards)=>{\n        newCards.map((card,i)=>{\n            if(card.value.life<=0){\n                //newCards.splice(i, 1);\n                        state.results.map((val,j)=>{\n                            if(val===i){\n                                //card.position=40;\n                                //newCards[val].position=40;\n                                newCards[state.results[j]].position=40;\n                                state.results[j]=false;\n                                return newCards\n                                //return\n                            }\n                        })\n            }\n        })\n        return newCards\n        //newCards.splice(0, 1);\n    }\n\n    const defense =(newAllCards1,x,y,def)=>{\n        for(let i=0;i<5;i++){\n            if(state.results[i+x]){\n                const attack1=def[state.results[i+x]].value.atack\n                if(state.results[i+5+x]){\n                    newAllCards1=attack(newAllCards1,i+y,attack1,def[state.results[i+x+5]].value.atack);\n                }else{\n                    newAllCards1=attack(newAllCards1,i+y,attack1);\n                }\n            }else\n            if(state.results[i+5+x]){\n                newAllCards1=attack(newAllCards1,i+y,false,def[state.results[i+x+5]].value.atack);\n            }\n        }\n        return newAllCards1;\n    }\n    const playOponents=()=>{//tymczasowy bott x=id pola y karta\n        let x;\n        let pass=0;\n        for(;;){\n            x=Math.floor(Math.random() * 10)+10;\n            if(state.results[x]===false){break;}\n            pass++;\n            if(pass>30){return}//fukcja pass\n        }\n        let y;\n        pass=0;\n        for(;;){\n            y=Math.floor(Math.random() * 10)\n            if(state.allCards.cardOpponent[y].position===50){break;}\n            pass++;\n            if(pass>30){return}//fukcja pass\n        }\n\n        const newResults4=state.results;\n        const newAllCards2={...state.allCards}\n        newResults4[x]=y;\n        newAllCards2.cardOpponent[y].position=x;\n            return {...state,\n                results:newResults4,\n                allCards:{...newAllCards2},\n            }\n    }\n\n    switch ( action.type ) {\n        case 'PLAY_THE_CARD':\n            const newResults=state.results;\n            const newAllCards={...state.allCards}\n            newResults[action.id]=action.val;\n            newAllCards.cards[action.val].position=action.id;\n                return {...state,\n                    results:newResults,\n                    allCards:{...newAllCards},\n                }\n        case 'GIVEAWAYTHECARS':\n            const newState={...state.allCards};\n            newState.cards.map((card)=>{\n                card.position=50;\n                card.value={...cardAttributes.PIXEL};//do zmiany\n                card.pictures=cardPictures.PIXEL\n            });\n            newState.cardOpponent.map((card)=>{\n                card.position=50;\n                card.value={...cardAttributes.PIXEL};//do zmiany\n                card.pictures=cardPictures.PIXEL\n            });\n            return{...state,\n                allCards:{...newState}};\n        case 'ENDTURN':\n            playOponents();\n            let newAllCards1=state.allCards.cardOpponent//mozliwe do poprawy !!!\n            let newAllCards2=state.allCards.cards\n            newAllCards1=defense(newAllCards1,0,10,newAllCards2)\n            newAllCards2=defense(newAllCards2,10,0,newAllCards1)\n            newAllCards1=delteCard(newAllCards1)\n            newAllCards2=delteCard(newAllCards2)\n            return {...state,\n                allCards:{\n                    cardOpponent:newAllCards1,\n                    cards:newAllCards2,\n\n            }}\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}