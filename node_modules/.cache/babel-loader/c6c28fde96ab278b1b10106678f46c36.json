{"ast":null,"code":"import _objectSpread from \"/media/mickuki/f37c4816-231b-487c-8f5f-b372b930c30c/web_master/programist-war/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport * as actionTypes from '../actions';\nimport * as cardAttributes from '../../components/Game/Cards/cardAttributes';\nconst initialState = {\n  results: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false],\n  allCards: {\n    cards: [{\n      position: 19\n    }, {\n      position: 19\n    }, {\n      position: 19\n    }, {\n      position: 19\n    }, {\n      position: 19\n    }, {\n      position: 19\n    }, {\n      position: 19\n    }, {\n      position: 19\n    }, {\n      position: 19\n    }, {\n      position: 19\n    }, {\n      position: 19\n    }, {\n      position: 19\n    }],\n    cardOpponent: [{\n      position: 19\n    }, {\n      position: 19\n    }, {\n      position: 19\n    }, {\n      position: 19\n    }, {\n      position: 19\n    }, {\n      position: 19\n    }, {\n      position: 19\n    }, {\n      position: 19\n    }, {\n      position: 19\n    }, {\n      position: 19\n    }, {\n      position: 19\n    }, {\n      position: 19\n    }]\n  }\n};\n\nconst reducer = (state = initialState, action) => {\n  const attack = (newAllCards1, direction, attack1, attack2) => {\n    //const newAllCards1={...state.allCards}\n    if (attack2) {\n      if (state.results[direction]) {\n        if (state.results[direction + 5]) {\n          newAllCards1.cardOpponent[state.results[direction]].value.life += attack1;\n          newAllCards1.cardOpponent[state.results[direction + 5]].value.life += attack2;\n        } else {\n          newAllCards1.cardOpponent[state.results[direction]].value.life += attack1 + attack2;\n        }\n      } else if (state.results[direction + 5]) {\n        newAllCards1.cardOpponent[state.results[direction + 5]].value.life += attack1 + attack2;\n      }\n    } else {\n      if (state.results[direction]) {\n        newAllCards1.cardOpponent[state.results[direction]].value.life += attack1;\n      } else if (state.results[direction + 5]) {\n        newAllCards1.cardOpponent[state.results[direction + 5]].value.life += attack1;\n      }\n    }\n\n    return newAllCards1;\n  };\n\n  const defense = newAllCards1 => {\n    for (let i = 0; i < 5; i++) {\n      if (state.results[i]) {\n        if (state.results[i + 5]) {\n          newAllCards1 = attack(newAllCards1, i, 1, 1);\n        } else {\n          newAllCards1 = attack(newAllCards1, i, 1, 1);\n        }\n      } else if (state.results[i + 5]) {\n        newAllCards1 = attack(newAllCards1, i, 1, 1);\n      }\n    }\n\n    return newAllCards1;\n  };\n\n  const playOponents = () => {\n    const newResults4 = state.results;\n\n    const newAllCards2 = _objectSpread({}, state.allCards);\n\n    newResults4[0] = 15;\n    newAllCards2.cardOpponent[0].position = 15;\n    return _objectSpread({}, state, {\n      results: newResults4,\n      allCards: _objectSpread({}, newAllCards2)\n    });\n  };\n\n  switch (action.type) {\n    case 'PLAY_THE_CARD':\n      const newResults = state.results;\n\n      const newAllCards = _objectSpread({}, state.allCards);\n\n      newResults[action.id] = action.val;\n      newAllCards.cards[action.val].position = action.id;\n      return _objectSpread({}, state, {\n        results: newResults,\n        allCards: _objectSpread({}, newAllCards)\n      });\n\n    case 'GIVEAWAYTHECARS':\n      const newState = _objectSpread({}, state.allCards);\n\n      newState.cards.map(card => {\n        card.position = 50;\n        card.value = _objectSpread({}, cardAttributes.PIXEL); //do zmiany\n      });\n      newState.cardOpponent.map(card => {\n        card.position = 50;\n        card.value = _objectSpread({}, cardAttributes.PIXEL); //do zmiany\n      });\n      return _objectSpread({}, state, {\n        allCards: _objectSpread({}, newState)\n      });\n\n    case 'ENDTURN':\n      playOponents();\n\n      const newAllCards1 = _objectSpread({}, state.allCards);\n\n    //return {...state,\n    //    allCards:defense(newAllCards1)}\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/media/mickuki/f37c4816-231b-487c-8f5f-b372b930c30c/web_master/programist-war/src/store/reducers/table.js"],"names":["actionTypes","cardAttributes","initialState","results","allCards","cards","position","cardOpponent","reducer","state","action","attack","newAllCards1","direction","attack1","attack2","value","life","defense","i","playOponents","newResults4","newAllCards2","type","newResults","newAllCards","id","val","newState","map","card","PIXEL"],"mappings":"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","sourcesContent":["import * as actionTypes from '../actions';\nimport * as cardAttributes from '../../components/Game/Cards/cardAttributes';\n\nconst initialState = {\n    results: [false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false],\n    allCards:{\n        cards:[{position:19},\n            {position:19},\n            {position:19},\n            {position:19},\n            {position:19},\n            {position:19},\n            {position:19},\n            {position:19},\n            {position:19},\n            {position:19},\n            {position:19},\n            {position:19}],\n        cardOpponent:[{position:19},\n            {position:19},\n            {position:19},\n            {position:19},\n            {position:19},\n            {position:19},\n            {position:19},\n            {position:19},\n            {position:19},\n            {position:19},\n            {position:19},\n            {position:19}]\n    }\n};\n\nconst reducer = ( state = initialState, action) => {\n\n\n    const attack =(newAllCards1,direction,attack1,attack2)=>{\n        //const newAllCards1={...state.allCards}\n        if(attack2){\n            if(state.results[direction]){\n                if(state.results[direction+5]){\n                    newAllCards1.cardOpponent[state.results[direction]].value.life+=(attack1);\n                    newAllCards1.cardOpponent[state.results[direction+5]].value.life+=(attack2);\n                }else{\n                    newAllCards1.cardOpponent[state.results[direction]].value.life+=(attack1+attack2);\n                }\n            }else\n            if(state.results[direction+5]){\n                newAllCards1.cardOpponent[state.results[direction+5]].value.life+=(attack1+attack2);\n            }\n        }else{\n            if(state.results[direction]){\n                newAllCards1.cardOpponent[state.results[direction]].value.life+=(attack1);\n            }else\n            if(state.results[direction+5]){\n                newAllCards1.cardOpponent[state.results[direction+5]].value.life+=(attack1);\n            }\n        }\n        return newAllCards1;\n    }\n\n    const defense =(newAllCards1)=>{\n        for(let i=0;i<5;i++){\n            if(state.results[i]){\n                if(state.results[i+5]){\n                    newAllCards1=attack(newAllCards1,i,1,1);\n                }else{\n                    newAllCards1=attack(newAllCards1,i,1,1);\n                }\n            }else\n            if(state.results[i+5]){\n                newAllCards1=attack(newAllCards1,i,1,1);\n            }\n        }\n        return newAllCards1;\n    }\n    const playOponents=()=>{\n        const newResults4=state.results;\n        const newAllCards2={...state.allCards}\n        newResults4[0]=15;\n        newAllCards2.cardOpponent[0].position=15;\n            return {...state,\n                results:newResults4,\n                allCards:{...newAllCards2},\n            }\n    }\n\n    switch ( action.type ) {\n        case 'PLAY_THE_CARD':\n            const newResults=state.results;\n            const newAllCards={...state.allCards}\n            newResults[action.id]=action.val;\n            newAllCards.cards[action.val].position=action.id;\n                return {...state,\n                    results:newResults,\n                    allCards:{...newAllCards},\n                }\n        case 'GIVEAWAYTHECARS':\n            const newState={...state.allCards};\n            newState.cards.map((card)=>{\n                card.position=50;\n                card.value={...cardAttributes.PIXEL};//do zmiany\n            });\n            newState.cardOpponent.map((card)=>{\n                card.position=50;\n                card.value={...cardAttributes.PIXEL};//do zmiany\n            });\n            return{...state,\n                allCards:{...newState}};\n        case 'ENDTURN':\n            playOponents();\n            const newAllCards1={...state.allCards}\n                //return {...state,\n                //    allCards:defense(newAllCards1)}\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}