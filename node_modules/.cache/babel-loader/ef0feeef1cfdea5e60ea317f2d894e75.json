{"ast":null,"code":"import _objectSpread from \"/media/mickuki/f37c4816-231b-487c-8f5f-b372b930c30c/web_master/programist-war/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport * as actionTypes from '../actions';\nimport * as cardAttributes from '../../components/Game/Cards/cardAttributes';\nimport math from 'mathjs';\nconst initialState = {\n  results: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false],\n  allCards: {\n    cards: [{\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }],\n    cardOpponent: [{\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }, {\n      position: 40\n    }]\n  }\n};\n\nconst reducer = (state = initialState, action) => {\n  const attack = (newAllCards1, direction, attack1, attack2) => {\n    //const newAllCards1={...state.allCards}\n    if (attack2) {\n      if (state.results[direction]) {\n        if (state.results[direction + 5]) {\n          alert(1);\n          newAllCards1[state.results[direction]].value.life -= attack1;\n          newAllCards1[state.results[direction + 5]].value.life -= attack2;\n        } else {\n          alert(5);\n          newAllCards1[state.results[direction]].value.life -= attack1 + attack2;\n        }\n      } else if (state.results[direction + 5]) {\n        alert(2);\n        newAllCards1[state.results[direction + 5]].value.life -= attack1 + attack2;\n      }\n    } else {\n      if (state.results[direction]) {\n        alert(3);\n        newAllCards1[state.results[direction]].value.life -= attack1;\n      } else if (state.results[direction + 5]) {\n        alert(4);\n        newAllCards1[state.results[direction + 5]].value.life -= attack1;\n      }\n    }\n\n    return newAllCards1;\n  };\n\n  const defense = newAllCards1 => {\n    for (let i = 0; i < 5; i++) {\n      if (state.results[i]) {\n        if (state.results[i + 5]) {\n          newAllCards1 = attack(newAllCards1, i + 10, 1, 1);\n        } else {\n          newAllCards1 = attack(newAllCards1, i + 10, 1, 1);\n        }\n      } else if (state.results[i + 5]) {\n        newAllCards1 = attack(newAllCards1, i + 10, 1, 1);\n      }\n    }\n\n    return newAllCards1;\n  };\n\n  const playOponents = () => {\n    const x = Math.floor(Math.random() * 10) + 10; //tymczasowy bott\n\n    const y = Math.floor(Math.random() * 10);\n    const newResults4 = state.results;\n\n    const newAllCards2 = _objectSpread({}, state.allCards);\n\n    newResults4[x] = y;\n    newAllCards2.cardOpponent[y].position = x;\n    return _objectSpread({}, state, {\n      results: newResults4,\n      allCards: _objectSpread({}, newAllCards2)\n    });\n  };\n\n  switch (action.type) {\n    case 'PLAY_THE_CARD':\n      const newResults = state.results;\n\n      const newAllCards = _objectSpread({}, state.allCards);\n\n      newResults[action.id] = action.val;\n      newAllCards.cards[action.val].position = action.id;\n      return _objectSpread({}, state, {\n        results: newResults,\n        allCards: _objectSpread({}, newAllCards)\n      });\n\n    case 'GIVEAWAYTHECARS':\n      const newState = _objectSpread({}, state.allCards);\n\n      newState.cards.map(card => {\n        card.position = 50;\n        card.value = _objectSpread({}, cardAttributes.PIXEL); //do zmiany\n      });\n      newState.cardOpponent.map(card => {\n        card.position = 50;\n        card.value = _objectSpread({}, cardAttributes.PIXEL); //do zmiany\n      });\n      return _objectSpread({}, state, {\n        allCards: _objectSpread({}, newState)\n      });\n\n    case 'ENDTURN':\n      playOponents();\n\n      const newAllCards1 = _objectSpread({}, state.allCards.cardOpponent);\n\n      const newAllCards2 = _objectSpread({}, state.allCards.cards);\n\n      return _objectSpread({}, state, {\n        allCards: {\n          cardOpponent: _objectSpread({}, defense(newAllCards1)),\n          cards: _objectSpread({}, defense(newAllCards2))\n        }\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/media/mickuki/f37c4816-231b-487c-8f5f-b372b930c30c/web_master/programist-war/src/store/reducers/table.js"],"names":["actionTypes","cardAttributes","math","initialState","results","allCards","cards","position","cardOpponent","reducer","state","action","attack","newAllCards1","direction","attack1","attack2","alert","value","life","defense","i","playOponents","x","Math","floor","random","y","newResults4","newAllCards2","type","newResults","newAllCards","id","val","newState","map","card","PIXEL"],"mappings":"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","sourcesContent":["import * as actionTypes from '../actions';\nimport * as cardAttributes from '../../components/Game/Cards/cardAttributes';\nimport math from 'mathjs';\n\nconst initialState = {\n    results: [false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false],\n    allCards:{\n        cards:[{position:40},\n            {position:40},\n            {position:40},\n            {position:40},\n            {position:40},\n            {position:40},\n            {position:40},\n            {position:40},\n            {position:40},\n            {position:40},\n            {position:40},\n            {position:40}],\n        cardOpponent:[{position:40},\n            {position:40},\n            {position:40},\n            {position:40},\n            {position:40},\n            {position:40},\n            {position:40},\n            {position:40},\n            {position:40},\n            {position:40},\n            {position:40},\n            {position:40}]\n    }\n};\n\nconst reducer = ( state = initialState, action) => {\n\n\n    const attack =(newAllCards1,direction,attack1,attack2)=>{\n        //const newAllCards1={...state.allCards}\n        if(attack2){\n            if(state.results[direction]){\n                if(state.results[direction+5]){alert(1)\n                    newAllCards1[state.results[direction]].value.life-=(attack1);\n                    newAllCards1[state.results[direction+5]].value.life-=(attack2);\n                }else{alert(5)\n                    newAllCards1[state.results[direction]].value.life-=(attack1+attack2);\n                }\n            }else\n            if(state.results[direction+5]){alert(2)\n                newAllCards1[state.results[direction+5]].value.life-=(attack1+attack2);\n            }\n        }else{\n            if(state.results[direction]){alert(3)\n                newAllCards1[state.results[direction]].value.life-=(attack1);\n            }else\n            if(state.results[direction+5]){alert(4)\n                newAllCards1[state.results[direction+5]].value.life-=(attack1);\n            }\n        }\n        return newAllCards1;\n    }\n\n    const defense =(newAllCards1)=>{\n        for(let i=0;i<5;i++){\n            if(state.results[i]){\n                if(state.results[i+5]){\n                    newAllCards1=attack(newAllCards1,i+10,1,1);\n                }else{\n                    newAllCards1=attack(newAllCards1,i+10,1,1);\n                }\n            }else\n            if(state.results[i+5]){\n                newAllCards1=attack(newAllCards1,i+10,1,1);\n            }\n        }\n        return newAllCards1;\n    }\n    const playOponents=()=>{\n        const x=Math.floor(Math.random() * 10)+10;//tymczasowy bott\n        const y=Math.floor(Math.random() * 10);\n        const newResults4=state.results;\n        const newAllCards2={...state.allCards}\n        newResults4[x]=y;\n        newAllCards2.cardOpponent[y].position=x;\n            return {...state,\n                results:newResults4,\n                allCards:{...newAllCards2},\n            }\n    }\n\n    switch ( action.type ) {\n        case 'PLAY_THE_CARD':\n            const newResults=state.results;\n            const newAllCards={...state.allCards}\n            newResults[action.id]=action.val;\n            newAllCards.cards[action.val].position=action.id;\n                return {...state,\n                    results:newResults,\n                    allCards:{...newAllCards},\n                }\n        case 'GIVEAWAYTHECARS':\n            const newState={...state.allCards};\n            newState.cards.map((card)=>{\n                card.position=50;\n                card.value={...cardAttributes.PIXEL};//do zmiany\n            });\n            newState.cardOpponent.map((card)=>{\n                card.position=50;\n                card.value={...cardAttributes.PIXEL};//do zmiany\n            });\n            return{...state,\n                allCards:{...newState}};\n        case 'ENDTURN':\n            playOponents();\n            const newAllCards1={...state.allCards.cardOpponent}\n            const newAllCards2={...state.allCards.cards}\n            return {...state,\n                allCards:{\n                    cardOpponent:{...defense(newAllCards1)},\n                    cards:{...defense(newAllCards2)}\n            }}\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}