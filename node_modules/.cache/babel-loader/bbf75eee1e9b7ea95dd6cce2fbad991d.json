{"ast":null,"code":"var _jsxFileName = \"/media/mickuki/f37c4816-231b-487c-8f5f-b372b930c30c/web_master/programist-war/src/container/Game/Game.js\";\nimport React, { Component } from 'react';\nimport Cards from '../../components/Game/Cards/Cards';\nimport styles from './Game.module.css';\nimport math from 'mathjs';\nimport Table from '../../components/Game/Table/Table';\nimport * as cardAttributes from '../../components/Game/Cards/cardAttributes';\nimport { connect } from 'react-redux';\nimport LeftPanel from '../../components/Game/Panels/LeftPanel/LeftPanel';\nimport ButtonGame from '../../components/Game/ButtonGame/ButtonGame';\n\nclass Builder extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      aray: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false],\n      valueButton: \"Start Game\" //^^ta dablica nie potrzebna !!!\n\n    };\n    this.game = {\n      hoverCard: false,\n      fieldPlayed: false\n    };\n\n    this.action = () => {\n      this.setState({\n        valueButton: \"Pass\"\n      });\n      this.props.giveAwayTheCards();\n    };\n\n    this.playTheCard = id => {\n      this.setState({\n        valueButton: \"End Turn\"\n      });\n      this.game.fieldPlayed = id;\n      this.props.playTheCard(this.game.hoverCard, this.game.fieldPlayed);\n    };\n\n    this.endTur = () => {\n      this.setState({\n        valueButton: \"Pass\"\n      });\n      this.props.endTurn();\n    };\n\n    this.hoverCard = id => {\n      if (20 >= id) {\n        this.game.hoverCard = id;\n      }\n    };\n\n    this.tableNuber = position => {\n      if (position < 5) return 5;else return 10;\n    };\n\n    this.pass = () => {\n      this.setState({\n        valueButton: \"New Game\"\n      });\n      this.props.pass();\n    };\n\n    this.newGame = () => {\n      this.props.newGame();\n      this.setState({\n        valueButton: \"Start Game\"\n      });\n    };\n  }\n\n  render() {\n    const card = this.props.allCards.cards.map((counter, i) => {\n      const lenght = this.props.allCards.cards.length;\n      let styleCard = null;\n\n      if (counter.position == 50) {\n        styleCard = {\n          transform: \"translate3d(-\" + (-i * (300 / lenght) + 650) + \"%,\" + (155 + math.abs(i - lenght / 2) * (70 / lenght)) + \"%,\" + (i + 30) + \"px) rotate(\" + (-30 + 60 / (lenght - 1) * i) + \"deg)\"\n        }; //do prawy Y i x\n      } else if (counter.position >= 0 && 20 >= counter.position) {\n        styleCard = {\n          transform: \"translate3d(-\" + (326 + 76 * (this.tableNuber(counter.position) - counter.position)) + \"%,\" + (34 + (this.tableNuber(counter.position) - 5) * 11.5) + \"%,\" + (i + 5) + \"px) rotate(0deg) scale(0.5)\"\n        }; //do prawy Y i x\n      }\n\n      return React.createElement(Cards, {\n        clicked: () => {\n          this.hoverCard(i);\n        },\n        key: i,\n        stylesCard: styleCard,\n        valCards: counter.value,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, counter.pictures);\n    });\n    const cardOpponent = this.props.allCards.cardOpponent.map((counter, i) => {\n      const lenght = this.props.allCards.cardOpponent.length;\n      let styleCard = null;\n\n      if (counter.position == 50) {\n        styleCard = {\n          transform: \"translate3d(-\" + (i * (300 / lenght) + 400) + \"%,\" + (-160 - math.abs(i - lenght / 2) * (70 / lenght)) + \"%,\" + (i + 5) + \"px) rotate(\" + (-30 + 60 / (lenght - 1) * i) + \"deg)\"\n        }; //do prawy Y i x\n      }\n\n      if (counter.position >= 0 && 20 >= counter.position) {\n        styleCard = {\n          transform: \"translate3d(-\" + (326 + 76 * (this.tableNuber(counter.position - 10) - (counter.position - 10))) + \"%,\" + (this.tableNuber(counter.position - 10) * -11.5 + 36) + \"%,\" + (i + 5) + \"px) rotate(0deg) scale(0.5)\"\n        }; //do prawy Y i x\n      }\n\n      return React.createElement(Cards, {\n        clicked: () => {\n          this.hoverCard(i);\n        },\n        key: i,\n        stylesCard: styleCard,\n        valCards: counter.value,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, counter.pictures);\n    });\n\n    const functionButton = () => {\n      if (this.state.valueButton == 'Start Game') {\n        return this.action();\n      } else if (this.state.valueButton == 'Pass') {\n        return this.pass();\n      } else if (this.state.valueButton == 'End Turn') {\n        return this.endTur();\n      } else if (this.state.valueButton == 'New Game') {\n        return this.newGame();\n      }\n    };\n\n    return React.createElement(\"div\", {\n      className: styles.GameDiv,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, cardOpponent, React.createElement(Table, {\n      clicked: this.playTheCard,\n      field: this.state.aray,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }), card, React.createElement(LeftPanel, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: styles.cardOptions0,\n      onClick: () => {\n        this.props.cardGo(this.game.hoverCard, 40);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }), React.createElement(ButtonGame, {\n      onClick: functionButton,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, this.state.valueButton), React.createElement(\"div\", {\n      className: styles.cardOptions1,\n      onClick: () => {\n        this.props.cardGo(this.game.hoverCard, 50);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    })));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    allCards: state.table.allCards,\n    results: state.table.results\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    playTheCard: (hoverCard, fieldPlayed) => dispatch({\n      type: 'PLAY_THE_CARD',\n      val: hoverCard,\n      id: fieldPlayed\n    }),\n    giveAwayTheCards: () => dispatch({\n      type: 'GIVEAWAYTHECARS'\n    }),\n    endTurn: () => dispatch({\n      type: 'ENDTURN'\n    }),\n    pass: () => dispatch({\n      type: 'PASS'\n    }),\n    newGame: () => dispatch({\n      type: 'NEWGAME'\n    }),\n    cardGo: (hoverCard, val) => dispatch({\n      type: 'CARDGO',\n      val: hoverCard,\n      fieldPlayed: val\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Builder);","map":{"version":3,"sources":["/media/mickuki/f37c4816-231b-487c-8f5f-b372b930c30c/web_master/programist-war/src/container/Game/Game.js"],"names":["React","Component","Cards","styles","math","Table","cardAttributes","connect","LeftPanel","ButtonGame","Builder","state","aray","valueButton","game","hoverCard","fieldPlayed","action","setState","props","giveAwayTheCards","playTheCard","id","endTur","endTurn","tableNuber","position","pass","newGame","render","card","allCards","cards","map","counter","i","lenght","length","styleCard","transform","abs","value","pictures","cardOpponent","functionButton","GameDiv","cardOptions0","cardGo","cardOptions1","mapStateToProps","table","results","mapDispatchToProps","dispatch","type","val"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Cards from '../../components/Game/Cards/Cards';\nimport styles from './Game.module.css';\nimport math from 'mathjs';\nimport Table from '../../components/Game/Table/Table';\nimport * as cardAttributes from '../../components/Game/Cards/cardAttributes';\nimport { connect } from 'react-redux';\nimport LeftPanel from '../../components/Game/Panels/LeftPanel/LeftPanel';\nimport ButtonGame from '../../components/Game/ButtonGame/ButtonGame';\nclass Builder extends Component{\n    state={\n        aray:[false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false],\n        valueButton:\"Start Game\",\n    }//^^ta dablica nie potrzebna !!!\n    game={\n        hoverCard:false,\n        fieldPlayed:false,\n    }\n    action=()=>{\n        this.setState({valueButton:\"Pass\"});\n        this.props.giveAwayTheCards();\n    }\n    playTheCard=(id)=>{\n        this.setState({valueButton:\"End Turn\"});\n        this.game.fieldPlayed=id;\n        this.props.playTheCard(this.game.hoverCard,this.game.fieldPlayed);\n    }\n    endTur=()=>{\n        this.setState({valueButton:\"Pass\"});\n        this.props.endTurn();\n    }\n    hoverCard=(id)=>{\n        if(20>=id){\n            this.game.hoverCard=id;\n        }\n    }\n    tableNuber=(position)=>{if(position<5)\n        return(5);\n    else\n        return(10);}\n    pass=()=>{\n        this.setState({valueButton:\"New Game\"});\n        this.props.pass()\n    }\n    newGame=()=>{\n        this.props.newGame()\n        this.setState({valueButton:\"Start Game\"});\n    }\n    render(){\n        const card=this.props.allCards.cards.map((counter,i)=>{\n            const lenght=this.props.allCards.cards.length;\n            let styleCard=null;\n            if(counter.position==50){\n                styleCard={transform:\"translate3d(-\"+(-i*(300/lenght)+650)+\"%,\"+(155+math.abs(i-lenght/2)*(70/lenght))+\"%,\"+(i+30)+\"px) rotate(\"+(-30+(60/(lenght-1))*i)+\"deg)\",};//do prawy Y i x\n            }else\n            if(counter.position>=0 && 20>=counter.position){\n                styleCard={transform:\"translate3d(-\"+(326+76*(this.tableNuber(counter.position)-counter.position))+\"%,\"+(34+(this.tableNuber(counter.position)-5)*11.5)+\"%,\"+(i+5)+\"px) rotate(0deg) scale(0.5)\",};//do prawy Y i x\n            }\n            return <Cards clicked={()=>{this.hoverCard(i)}} key={i} stylesCard={styleCard} valCards={counter.value}>{counter.pictures}</Cards>\n        })\n\n\n        const cardOpponent=this.props.allCards.cardOpponent.map((counter,i)=>{\n            const lenght=this.props.allCards.cardOpponent.length;\n            let styleCard=null;\n            if(counter.position==50){\n                styleCard={transform:\"translate3d(-\"+(i*(300/lenght)+400)+\"%,\"+(-160-math.abs(i-lenght/2)*(70/lenght))+\"%,\"+(i+5)+\"px) rotate(\"+(-30+(60/(lenght-1))*i)+\"deg)\",};//do prawy Y i x\n            }\n            if(counter.position>=0 && 20>=counter.position){\n                styleCard={transform:\"translate3d(-\"+(326+76*((this.tableNuber(counter.position-10)-(counter.position-10))))+\"%,\"+((this.tableNuber(counter.position-10))*(-11.5)+36)+\"%,\"+(i+5)+\"px) rotate(0deg) scale(0.5)\",};//do prawy Y i x\n            }\n            return <Cards clicked={()=>{this.hoverCard(i)}} key={i} stylesCard={styleCard} valCards={counter.value}>{counter.pictures}</Cards>\n        })\n        const functionButton=()=>{\n            if(this.state.valueButton=='Start Game'){return this.action()}else\n            if(this.state.valueButton=='Pass'){return this.pass()}else\n            if(this.state.valueButton=='End Turn'){return this.endTur()}else\n            if(this.state.valueButton=='New Game'){return this.newGame()}\n        }\n        return(\n            <div className={styles.GameDiv}>\n                {cardOpponent}\n            <Table clicked={this.playTheCard} field={this.state.aray}/>\n                {card}\n                <LeftPanel>\n                    <div className={styles.cardOptions0} onClick={()=>{this.props.cardGo(this.game.hoverCard,40)}}></div>\n                    <ButtonGame onClick={functionButton}>{this.state.valueButton}</ButtonGame>\n                    <div className={styles.cardOptions1} onClick={()=>{this.props.cardGo(this.game.hoverCard,50)}}></div>\n                </LeftPanel>\n            </div>\n        );\n    }\n}\n\n\nconst mapStateToProps = state => {\n    return {\n        allCards: state.table.allCards,\n        results: state.table.results,\n    }\n};\nconst mapDispatchToProps = dispatch => {\n    return {\n        playTheCard: (hoverCard,fieldPlayed) => dispatch({type: 'PLAY_THE_CARD', val: hoverCard, id: fieldPlayed }),\n        giveAwayTheCards: () =>dispatch({type: 'GIVEAWAYTHECARS'}),\n        endTurn: () =>dispatch({type: 'ENDTURN'}),\n        pass: () =>dispatch({type: 'PASS'}),\n        newGame: () =>dispatch({type: 'NEWGAME'}),\n        cardGo: (hoverCard,val) =>dispatch({type: 'CARDGO', val: hoverCard,fieldPlayed: val}),\n    }\n};\n\nexport default connect(mapStateToProps ,mapDispatchToProps)(Builder);\n"]},"metadata":{},"sourceType":"module"}